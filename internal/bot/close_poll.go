package bot

import (
	"fmt"
	"log"

	"go-telegram-cs-admin/internal/db"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	// –ï—Å–ª–∏ –≤–∞—à–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–∫–µ—Ç–∞ –ë–î –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –ø—É—Ç–∏ "go-telegram-cs-admin/db",
	// –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏–º–ø–æ—Ä—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.
)

// ClosePoll –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–ø—Ä–æ—Å –≤—Ä—É—á–Ω—É—é (–∫–æ–º–∞–Ω–¥–∞ /close_pool).
func ClosePoll(bot *tgbotapi.BotAPI, pollID string) error {
	var p db.Poll
	if err := db.DB.Where("poll_id = ?", pollID).First(&p).Error; err != nil {
		return fmt.Errorf("–æ–ø—Ä–æ—Å %s –Ω–µ –Ω–∞–π–¥–µ–Ω: %w", pollID, err)
	}
	if p.IsClosed {
		return fmt.Errorf("–æ–ø—Ä–æ—Å —É–∂–µ –∑–∞–∫—Ä—ã—Ç")
	}
	stopConfig := tgbotapi.NewStopPoll(p.ChatID, p.MessageID)
	if _, err := bot.StopPoll(stopConfig); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–ø—Ä–æ—Å–∞: %w", err)
	}
	p.IsClosed = true
	if err := db.DB.Save(&p).Error; err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–ø—Ä–æ—Å–∞: %w", err)
	}
	log.Printf("üõë –û–ø—Ä–æ—Å %s –∑–∞–∫—Ä—ã—Ç –≤—Ä—É—á–Ω—É—é", pollID)
	return nil
}
