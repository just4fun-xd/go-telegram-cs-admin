package bot

import (
	"fmt"
	"log"
	"time"

	"go-telegram-cs-admin/internal/constants"
	"go-telegram-cs-admin/internal/db"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func StartReminderRoutine(bot *tgbotapi.BotAPI) {
	ticker := time.NewTicker(30 * time.Second)
	go func() {
		for range ticker.C {
			checkReminders(bot)
		}
	}()
}

// checkReminders ‚Äî –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫ –∏—â–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ reminders, –≥–¥–µ ReminderTime<=now –∏ Reminded=false.
func checkReminders(bot *tgbotapi.BotAPI) {
	now := time.Now()
	var items []db.Reminder
	err := db.DB.Where("reminded = ? AND reminder_time <= ?", false, now).Find(&items).Error
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ reminders:", err)
		return
	}

	for _, r := range items {
		// –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤, –≥–¥–µ VoteDate=r.OptionDate
		// —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
		var earliestVotes []db.Vote
		db.DB.Where("poll_id = ? AND vote_date = ?", r.PollID, r.OptionDate).
			Order("created_at ASC").
			Limit(constants.NumbersOfPlayers).
			Find(&earliestVotes)

		// –ü–æ–ª—É—á–∞–µ–º ChatID –∏–∑ Poll
		chatID := getChatID(r.PollID)
		if chatID == 0 {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ChatID –¥–ª—è PollID=%s", r.PollID)
			continue
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
		usersSet := make(map[string]bool)
		var usersList string
		for _, v := range earliestVotes {
			if !usersSet[v.UserName] {
				usersSet[v.UserName] = true
				usersList += "@" + v.UserName + "\n"
			}
		}

		// –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		fullMsg := fmt.Sprintf("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞—é! –í—Å—Ç—Ä–µ—á–∞ —Å–æ—Å—Ç–æ–∏—Ç—Å—è %s.\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n%s\nüö® –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –ø–µ—Ä–µ–¥—É–º–∞–ª ‚Äî–ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç–µ –æ–± —ç—Ç–æ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤\n\n%s",
			r.OptionDate,
			usersList,
			constants.MsgMeetingPlace,
		)
		sendNormalMessage(bot, chatID, fullMsg)

		// –ü–æ–º–µ—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
		r.Reminded = true
		db.DB.Save(&r)
		log.Printf("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (PollID=%s, Option=%s)", r.PollID, r.OptionDate)
	}
}

// getChatID ‚Äî –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º ChatID –∏–∑ Poll
func getChatID(pollID string) int64 {
	var p db.Poll
	if err := db.DB.Where("poll_id = ?", pollID).First(&p).Error; err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Poll:", err)
		return 0
	}
	return p.ChatID
}
