package bot

import (
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"go-telegram-cs-admin/internal/db"
	"go-telegram-cs-admin/internal/utils"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func SendPoll(bot *tgbotapi.BotAPI, chatID int64) {
	options := utils.GeneratePollOptions()
	question := "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–µ –¥–Ω–∏"

	pollCfg := tgbotapi.NewPoll(chatID, question, options...)
	pollCfg.AllowsMultipleAnswers = true
	pollCfg.IsAnonymous = false

	// 1) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å
	sent, err := bot.Send(pollCfg)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞:", err)
		return
	}
	if sent.Poll == nil {
		log.Println("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Poll –æ—Ç Telegram (–Ω–µ—Ç sent.Poll)")
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º Poll –≤ –±–∞–∑–µ
	newPoll := db.Poll{
		PollID:       sent.Poll.ID,
		ChatID:       chatID,
		MessageID:    sent.MessageID,
		IsClosed:     false,
		OptionsCount: len(options),
	}
	if e := db.DB.Create(&newPoll).Error; e != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞:", e)
		return
	}
	log.Printf("‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω. PollID=%s, MessageID=%d", sent.Poll.ID, sent.MessageID)

	// 2) –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
	inlineKeys := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ó–∞–∫—Ä—ã—Ç—å", fmt.Sprintf("close_%d", sent.MessageID)),
			tgbotapi.NewInlineKeyboardButtonData("–£–¥–∞–ª–∏—Ç—å", fmt.Sprintf("delete_%d", sent.MessageID)),
		),
	)

	// 3) "–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º" —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø—Ä–æ—Å–æ–º, —á—Ç–æ–±—ã –∫ –Ω–µ–º—É –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
	editMarkup := tgbotapi.NewEditMessageReplyMarkup(chatID, sent.MessageID, inlineKeys)
	if _, err2 := bot.Send(editMarkup); err2 != nil {
		log.Printf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –∫ –æ–ø—Ä–æ—Å—É: %v", err2)
	}
}

func SendDayPoll(bot *tgbotapi.BotAPI, chatID int64, dayStr string) {
	t, err := parseDDMM(dayStr)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ parseDDMM:", err)
		return
	}
	weekday := getRussianWeekday(t.Weekday())
	pollDay := fmt.Sprintf("%s (%s)", weekday, t.Format("02.01"))

	pollOptions := []string{"–¥–∞", "–Ω–µ—Ç", "–º–Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å"}
	question := fmt.Sprintf("–°–æ–±–µ—Ä—ë–º—Å—è %s?", dayStr)

	cfg := tgbotapi.NewPoll(chatID, question, pollOptions...)
	cfg.AllowsMultipleAnswers = false
	cfg.IsAnonymous = false

	// 1) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å
	sentPoll, err := bot.Send(cfg)
	if err != nil || sentPoll.Poll == nil {
		log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞:", err)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º Poll –≤ –±–∞–∑–µ
	newPoll := db.Poll{
		PollID:       sentPoll.Poll.ID,
		ChatID:       chatID,
		MessageID:    sentPoll.MessageID,
		IsClosed:     false,
		OptionsCount: 3,
		EventDate:    t,
		PollDay:      pollDay,
	}
	if e := db.DB.Create(&newPoll).Error; e != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞:", e)
		return
	}
	log.Printf("‚úÖ –î–Ω–µ–≤–Ω–æ–π –æ–ø—Ä–æ—Å %s —Å–æ–∑–¥–∞–Ω (PollID=%s).", pollDay, sentPoll.Poll.ID)

	// 2) –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
	inlineKeys := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ó–∞–∫—Ä—ã—Ç—å", fmt.Sprintf("close_%d", sentPoll.MessageID)),
			tgbotapi.NewInlineKeyboardButtonData("–£–¥–∞–ª–∏—Ç—å", fmt.Sprintf("delete_%d", sentPoll.MessageID)),
		),
	)

	// 3) –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–∏–∫—Ä–µ–ø–ª—è—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
	editMarkup := tgbotapi.NewEditMessageReplyMarkup(chatID, sentPoll.MessageID, inlineKeys)
	if _, err2 := bot.Send(editMarkup); err2 != nil {
		log.Printf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –∫ –¥–Ω–µ–≤–Ω–æ–º—É –æ–ø—Ä–æ—Å—É: %v", err2)
	}
}

// parseDDMM ...
func parseDDMM(ddmm string) (time.Time, error) {
	parts := strings.Split(ddmm, ".")
	if len(parts) != 2 {
		return time.Time{}, fmt.Errorf("—Ñ–æ—Ä–º–∞—Ç –Ω–µ DD.MM")
	}
	dd, err1 := strconv.Atoi(parts[0])
	mm, err2 := strconv.Atoi(parts[1])
	if err1 != nil || err2 != nil {
		return time.Time{}, fmt.Errorf("–æ—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
	}
	loc, _ := time.LoadLocation("Asia/Novosibirsk")
	now := time.Now().In(loc)
	year := now.Year()
	t := time.Date(year, time.Month(mm), dd, 0, 0, 0, 0, loc)
	if t.Before(now) {
		t = t.AddDate(1, 0, 0)
	}
	return t, nil
}

// getRussianWeekday ...
func getRussianWeekday(w time.Weekday) string {
	switch w {
	case time.Monday:
		return "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
	case time.Tuesday:
		return "–í—Ç–æ—Ä–Ω–∏–∫"
	case time.Wednesday:
		return "–°—Ä–µ–¥–∞"
	case time.Thursday:
		return "–ß–µ—Ç–≤–µ—Ä–≥"
	case time.Friday:
		return "–ü—è—Ç–Ω–∏—Ü–∞"
	case time.Saturday:
		return "–°—É–±–±–æ—Ç–∞"
	case time.Sunday:
		return "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
	}
	return ""
}
