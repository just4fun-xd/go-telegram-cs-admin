package bot

import (
	"fmt"
	"log"
	"regexp"
	"strconv"
	"strings"
	"time"

	"go-telegram-cs-admin/config"
	"go-telegram-cs-admin/internal/constants"
	"go-telegram-cs-admin/internal/db"
	"go-telegram-cs-admin/internal/utils"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// dayRegex –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "–í—Ç–æ—Ä–Ω–∏–∫ (11.02)"
var dayRegex = regexp.MustCompile(`\((\d{2}\.\d{2})\)`)

// HandlePollAnswer –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ poll_answer
func HandlePollAnswer(bot *tgbotapi.BotAPI, pollAnswer *tgbotapi.PollAnswer) {
	pollID := pollAnswer.PollID
	userID := pollAnswer.User.ID
	userName := pollAnswer.User.UserName
	if userName == "" {
		userName = strings.TrimSpace(pollAnswer.User.FirstName + " " + pollAnswer.User.LastName)
	}

	log.Printf("üì© –ü–æ–ª—É—á–µ–Ω –≥–æ–ª–æ—Å –æ—Ç: %s (ID=%d) –∑–∞ –æ–ø—Ä–æ—Å %s", userName, userID, pollID)

	// –ò—â–µ–º –æ–ø—Ä–æ—Å –≤ –ë–î
	var p db.Poll
	if err := db.DB.Where("poll_id = ?", pollID).First(&p).Error; err != nil {
		log.Printf("‚ö†Ô∏è –û–ø—Ä–æ—Å %s –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î", pollID)
		return
	}

	// –ï—Å–ª–∏ –æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç, –ø–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã
	if p.IsClosed {
		log.Printf("‚ö†Ô∏è –û–ø—Ä–æ—Å %s —É–∂–µ –∑–∞–∫—Ä—ã—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–≤–µ—Ç—ã", pollID)
		return
	}

	// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≥–æ–ª–æ—Å–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	db.DB.Where("poll_id = ? AND user_id = ?", pollID, userID).Delete(&db.Vote{})

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –≥–æ–ª–æ—Å–∞
	options := utils.GeneratePollOptions() // –ù–∞–ø—Ä–∏–º–µ—Ä, ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ (10.02)", "–í—Ç–æ—Ä–Ω–∏–∫ (11.02)", ...]
	for _, optionID := range pollAnswer.OptionIDs {
		if optionID < 0 || optionID >= len(options) {
			continue
		}
		dateChoice := options[optionID]

		vote := db.Vote{
			PollID:   pollID,
			UserID:   userID,
			UserName: userName,
			ChatID:   p.ChatID,
			VoteDate: dateChoice,
		}
		if err := db.DB.Create(&vote).Error; err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞: %v", err)
		} else {
			log.Printf("‚úÖ %s (ID=%d) –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ %s", userName, userID, dateChoice)

			// –ï—Å–ª–∏ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–∞–±—Ä–∞–ª–æ—Å—å 10 –≥–æ–ª–æ—Å–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
			count := db.CountVotesForDate(pollID, dateChoice)
			if count == constants.NumbersOfPlayers {
				sendThresholdAlert(bot, p.ChatID, dateChoice, pollID)
				// –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –≤—Å—Ç—Ä–µ—á–∏.
				// –ó–¥–µ—Å—å –º—ã –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–ø—Ä–æ—Å, –∞ –ª–∏—à—å —Ñ–∏–∫—Å–∏—Ä—É–µ–º –¥–∞—Ç—É –≤—Å—Ç—Ä–µ—á–∏ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ReminderDate.
				autoFinalizeDay(bot, &p, dateChoice)
			}
		}
	}
}

// autoFinalizeDay —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç EventDate –∏ ReminderDate –¥–ª—è –æ–ø—Ä–æ—Å–∞ (–±–µ–∑ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–ø—Ä–æ—Å–∞)
func autoFinalizeDay(bot *tgbotapi.BotAPI, p *db.Poll, dateChoice string) {
	log.Printf("üîí –ê–≤—Ç–æ—Ñ–∏–∫—Å–∞—Ü–∏—è –¥–∞—Ç—ã –¥–ª—è PollID=%s: %s", p.PollID, dateChoice)

	// –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "–í—Ç–æ—Ä–Ω–∏–∫ (11.02)"
	eventTime, err := parseDayChoice(dateChoice)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ '%s': %v", dateChoice, err)
		return
	}

	// –í—ã—á–∏—Å–ª—è–µ–º ReminderDate —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏
	reminderTime := calcReminderTime(eventTime)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ–ø—Ä–æ—Å–µ
	p.EventDate = eventTime
	p.ReminderDate = &reminderTime
	p.Reminded = false
	// –ó–¥–µ—Å—å –æ–ø—Ä–æ—Å –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
	if err := db.DB.Save(&p).Error; err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Poll: %v", err)
		return
	}

	msgText := fmt.Sprintf(
		"–î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞: %s.\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏–¥—ë—Ç %s.",
		dateChoice,
		reminderTime.Format("02.01.2006 15:04:05"),
	)
	bot.Send(tgbotapi.NewMessage(p.ChatID, msgText))
}

// parseDayChoice –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "–í—Ç–æ—Ä–Ω–∏–∫ (11.02)" –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç time.Time
func parseDayChoice(dayChoice string) (time.Time, error) {
	match := dayRegex.FindStringSubmatch(dayChoice)
	if len(match) < 2 {
		return time.Time{}, fmt.Errorf("–Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ –≤ '%s'", dayChoice)
	}
	dateStr := match[1] // –ù–∞–ø—Ä–∏–º–µ—Ä, "11.02"
	parts := strings.Split(dateStr, ".")
	if len(parts) != 2 {
		return time.Time{}, fmt.Errorf("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç '%s'", dateStr)
	}
	day, err := strconv.Atoi(parts[0])
	if err != nil {
		return time.Time{}, err
	}
	month, err := strconv.Atoi(parts[1])
	if err != nil {
		return time.Time{}, err
	}
	loc, err := time.LoadLocation("Asia/Novosibirsk")
	if err != nil {
		loc = time.UTC
	}
	now := time.Now().In(loc)
	year := now.Year()
	event := time.Date(year, time.Month(month), day, 0, 0, 0, 0, loc)
	if event.Before(now) {
		// –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞, —Å–¥–≤–∏–≥–∞–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
		event = event.AddDate(1, 0, 0)
	}
	return event, nil
}

// calcReminderTime –≤—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
// –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ (DebugReminders), –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥.
// –ò–Ω–∞—á–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç EventTime –º–∏–Ω—É—Å 2 –¥–Ω—è, —É—Å—Ç–∞–Ω–æ–≤–∏–≤ –≤—Ä–µ–º—è –Ω–∞ 14:00 –ø–æ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫—É.
func calcReminderTime(eventTime time.Time) time.Time {
	cfg := config.LoadConfig()
	if cfg.DebugReminders {
		log.Println("[DEBUG] –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥.")
		return time.Now().Add(30 * time.Second)
	}

	loc, err := time.LoadLocation("Asia/Novosibirsk")
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª–∏ Asia/Novosibirsk:", err)
		loc = time.UTC
	}

	reminderTime := eventTime.AddDate(0, 0, -2)
	reminderTime = time.Date(
		reminderTime.Year(),
		reminderTime.Month(),
		reminderTime.Day(),
		14, 0, 0, 0,
		loc,
	)
	return reminderTime
}

// sendThresholdAlert –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–∞–±—Ä–∞–ª–æ—Å—å 10 –≥–æ–ª–æ—Å–æ–≤.
func sendThresholdAlert(bot *tgbotapi.BotAPI, chatID int64, dateChoice, pollID string) {
	voters := db.GetVotersForDate(pollID, dateChoice)
	text := fmt.Sprintf("üîî –ó–∞ –¥–µ–Ω—å '%s' –Ω–∞–±—Ä–∞–Ω–æ 10 –≥–æ–ª–æ—Å–æ–≤!\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n%s", dateChoice, voters)
	bot.Send(tgbotapi.NewMessage(chatID, text))
}
