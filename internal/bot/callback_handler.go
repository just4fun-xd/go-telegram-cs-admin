package bot

import (
	"fmt"
	"go-telegram-cs-admin/internal/db"
	"log"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func HandleCallbackQuery(bot *tgbotapi.BotAPI, cq *tgbotapi.CallbackQuery) {
	data := cq.Data

	switch {
	case strings.HasPrefix(data, "close_"):
		msgIDStr := strings.TrimPrefix(data, "close_")
		handleClosePollInline(bot, cq, strToInt(msgIDStr))

	case strings.HasPrefix(data, "delete_"):
		msgIDStr := strings.TrimPrefix(data, "delete_")
		handleDeletePollInline(bot, cq, strToInt(msgIDStr))

	case strings.HasPrefix(data, "rd|"):
		shortID := strings.TrimPrefix(data, "rd|")
		handleReplaceDayShortID(bot, cq, shortID)

	default:
		// –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
	}

	// –£–±–∏—Ä–∞–µ–º "—Å–ø–∏–Ω–Ω–µ—Ä"
	bot.Request(tgbotapi.NewCallback(cq.ID, ""))
}

func handleClosePollInline(bot *tgbotapi.BotAPI, cq *tgbotapi.CallbackQuery, messageID int) {
	chatID := cq.Message.Chat.ID

	poll, err := findPollByChatMessageID(chatID, messageID)
	if err != nil {
		bot.Request(tgbotapi.NewCallbackWithAlert(cq.ID, "–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"))
		log.Printf("–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: %v", err)
		return
	}
	if poll.IsClosed {
		bot.Request(tgbotapi.NewCallbackWithAlert(cq.ID, "–û–ø—Ä–æ—Å —É–∂–µ –∑–∞–∫—Ä—ã—Ç!"))
		return
	}

	stopCfg := tgbotapi.NewStopPoll(chatID, messageID)
	if _, err := bot.StopPoll(stopCfg); err != nil {
		bot.Request(tgbotapi.NewCallbackWithAlert(cq.ID, fmt.Sprintf("–û—à–∏–±–∫–∞: %v", err)))
		return
	}
	poll.IsClosed = true
	savePoll(poll)

	// –ó–∞–º–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –æ—Å—Ç–∞–≤–ª—è—è –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å"
	newMarkup := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–£–¥–∞–ª–∏—Ç—å", fmt.Sprintf("delete_%d", messageID)),
		),
	)
	editMsg := tgbotapi.NewEditMessageReplyMarkup(chatID, messageID, newMarkup)
	bot.Send(editMsg)

	bot.Request(tgbotapi.NewCallback(cq.ID, "–û–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç!"))
	log.Printf("üõë –û–ø—Ä–æ—Å PollID=%s –∑–∞–∫—Ä—ã—Ç, msgID=%d", poll.PollID, messageID)
}

func handleDeletePollInline(bot *tgbotapi.BotAPI, cq *tgbotapi.CallbackQuery, messageID int) {
	chatID := cq.Message.Chat.ID

	delMsg := tgbotapi.NewDeleteMessage(chatID, messageID)
	if _, err := bot.Request(delMsg); err != nil {
		bot.Request(tgbotapi.NewCallbackWithAlert(cq.ID, fmt.Sprintf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: %v", err)))
		return
	}

	bot.Request(tgbotapi.NewCallback(cq.ID, "–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!"))
	log.Printf("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ msgID=%d —É–¥–∞–ª–µ–Ω–æ", messageID)
}

func handleReplaceDayShortID(bot *tgbotapi.BotAPI, cq *tgbotapi.CallbackQuery, shortID string) {
	val, ok := replaceDayCache.Load(shortID)
	if !ok {
		bot.Request(tgbotapi.NewCallbackWithAlert(cq.ID, "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"))
		return
	}
	ctx, ok := val.(*ReplaceDayContext)
	if !ok {
		bot.Request(tgbotapi.NewCallbackWithAlert(cq.ID, "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"))
		return
	}
	replaceDayCache.Delete(shortID)

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–º–µ–Ω—É
	if err := replaceParticipantWeekly(ctx.PollID, ctx.OldUser, ctx.NewUser, ctx.Day); err != nil {
		bot.Request(tgbotapi.NewCallbackWithAlert(cq.ID, fmt.Sprintf("–û—à–∏–±–∫–∞: %v", err)))
		return
	}

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–ï cq.Message.MessageID, –∞ –∏–º–µ–Ω–Ω–æ ctx.KeyboardMsgID / ctx.KeyboardChatID
	if ctx.KeyboardMsgID != 0 && ctx.KeyboardChatID != 0 {
		delMsg := tgbotapi.NewDeleteMessage(ctx.KeyboardChatID, ctx.KeyboardMsgID)
		if _, err := bot.Request(delMsg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: %v", err)
		}
	} else {
		log.Println("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ctx.KeyboardMsgID=0, –≤–æ–∑–º–æ–∂–Ω–æ ID –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	success := tgbotapi.NewMessage(cq.Message.Chat.ID,
		fmt.Sprintf("‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ @%s –∑–∞–º–µ–Ω—ë–Ω –Ω–∞ @%s –≤ –¥–µ–Ω—å '%s'.", ctx.OldUser, ctx.NewUser, ctx.Day),
	)
	if _, err := bot.Send(success); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

	log.Printf("‚úÖ –ó–∞–º–µ–Ω—ë–Ω @%s -> @%s (Day=%s, PollID=%s)", ctx.OldUser, ctx.NewUser, ctx.Day, ctx.PollID)
	// bot.Request(tgbotapi.NewCallback(cq.ID, "–£—á–∞—Å—Ç–Ω–∏–∫ –∑–∞–º–µ–Ω—ë–Ω!"))
}

func findPollByChatMessageID(chatID int64, messageID int) (*db.Poll, error) {
	var p db.Poll
	err := db.DB.Where("chat_id = ? AND message_id = ?", chatID, messageID).First(&p).Error
	if err != nil {
		return nil, err
	}
	return &p, nil
}

func strToInt(s string) int {
	i, _ := strconv.Atoi(s)
	return i
}
